body {
    font-family: "Cantarell Extra Bold", sans-serif;
    background-color: palevioletred;
    color: white;
}

h1 {
    position: fixed;
    font-size: 72px;
    top: 30%;
    left: 20%;
    text-align: center;
    width: 60%;
    z-index: 200;
    box-shadow: 0 0 160px 50px white;
    border-radius: 20px;
}

p {
    font-family: "DejaVu Serif", serif;
    font-size: 36px;
    color: crimson;
    opacity: 30%;
    transform: skewX(-23deg); /* because it exists */
    margin-left: 64px;
}

/*
So: We have the position property:
position: [static|relative|absolute|fixed|sticky];
--> default is static
    relative lets you offset from other element
    absolute and fixed use absolute positioning - and fixed element stay where they are when you scroll
    sticky becomes fixed when you scroll past a certain point

z-index: [integer value]; --> ignored if position is static!

display: [inline|block|inline-block|flex|...];
--> default depends on element type, text is usually inline but hX are block
    inline elements cannot have their height&width specified
    block elements can have their dimensions set, and fill entire page width by default
    inline-block appear next to each other and you can set their width&height and so on
    flex(ible) means stuff - there's also a justify-content: space-between; thing that might be useful
justify-content: [flex-start|flex-end|center|space-between|space-around|...]
--> adjusting element inside flex

float: [left|right]; --> as simple as it sounds. Must have width.

clear: [left|right|both|none];
--> determines where the element will refrain from touching another element within same parent.
    Sorta related to float.

preferred unit for some font thingies is em, aye aye
but do unitless for line-height since that follows the font size
 */
